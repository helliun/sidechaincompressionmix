numpy
scipy
pydub# importsimport numpy as npimport scipyfrom pydub import AudioSegment# codeclass SideChainCompression:    def __init__(self
file1
file2):        self.audio1
self.audio2 = self.import_audio_files(file1
file2)    def import_audio_files(self
file1
file2):        audio1 = AudioSegment.from_file(file1)        audio2 = AudioSegment.from_file(file2)        return audio1
audio2    def audio_to_numpy(self
audio1
audio2):        audio1_np = np.array(audio1.get_array_of_samples())        audio2_np = np.array(audio2.get_array_of_samples())        return audio1_np
audio2_np    def calculate_rms(self
audio1_np
audio2_np):        rms1 = np.sqrt(np.mean(np.square(audio1_np)))        rms2 = np.sqrt(np.mean(np.square(audio2_np)))        return rms1
rms2    def find_compression_threshold(self
rms1
rms2):        if rms1 > rms2:            threshold = rms2 * 0.75        else:            threshold = rms1 * 0.75        return threshold    def apply_side_chain_compression(self):        # Convert audio to numpy arrays        audio1_np
audio2_np = self.audio_to_numpy(self.audio1
self.audio2)        # Calculate the RMS values and compression threshold        rms1
rms2 = self.calculate_rms(audio1_np
audio2_np)        threshold = self.find_compression_threshold(rms1
rms2)        # Apply side-chain compression        compressed_audio1 = audio1_np * (threshold / rms1)        # Convert compressed audio back to AudioSegment        compressed_audio1 = AudioSegment(compressed_audio1.tobytes()
frame_rate=self.audio1.frame_rate
sample_width=self.audio1.sample_width
channels=self.audio1.channels)        return compressed_audio1    def numpy_to_audio(self
audio_np
sample_rate
sample_width
channels):        audio_segment = AudioSegment(audio_np.tobytes()
frame_rate=sample_rate
sample_width=sample_width
channels=channels)        return audio_segment    def export_compressed_audio(self
compressed_audio
output_file_path):        compressed_audio.export(output_file_path
format="wav")    def side_chain_compression(self):        # Apply side-chain compression        compressed_audio1 = self.apply_side_chain_compression()        return compressed_audio
